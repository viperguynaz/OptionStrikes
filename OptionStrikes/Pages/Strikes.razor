@page "/strikes/{ticker?}/{ticks:long?}"
@using Microsoft.JSInterop;
@using OptionStrikes.Entities
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Option Chains</h1>

@if (yahooResponse == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>Options for @Ticker | Last price: @price | Expiration: @expiration.Date.ToShortDateString()</p>
    <table>
        <thead>
            <tr>
                <th>Strike</th>
                <th>Bid</th>
                <th>Ask</th>
                <th>Last</th>
                <th>Change</th>
                <th>Volume</th>
                <th>OI</th>
            </tr>
        </thead>
        <tbody class="hide">
            @foreach (var option in options ?? Enumerable.Empty<Put>())
            {
                <tr>
                    <td>@option.Strike.ToString("C2")</td>
                    <td>@option.Bid.ToString("C2")</td>
                    <td>@option.Ask.ToString("C2")</td>
                    <td>@option.LastPrice.ToString("C2")</td>
                    <td data-monetary-amount="@option.Change.ToString("C2")"></td>
                    <td>@option.Volume</td>
                    <td>@option.OpenInterest</td>
                </tr>
            }
        </tbody>
    </table>    


}

@code {
    [Parameter]
    public string? Ticker { get; set; }
    [Parameter]
    public long? Ticks { get; set; }

    [Inject]
    public IJSRuntime JSRuntime { get; set; }
    private IJSObjectReference jsModule;

    private YahooOptionsResponse? yahooResponse;
    private List<Put>? options;
    private double price;
    private List<long>? expirationDates;
    private Expiration expiration;

    protected override async Task OnInitializedAsync()
    {
        Ticker = Ticker ?? "AAPL";
        Ticks = Ticks ?? 1649894400;
        expiration = new Expiration(Ticks.Value);
        var request = new YahooOptionsRequest(Ticker, Ticks);
        yahooResponse = await Http.GetFromJsonAsync<YahooOptionsResponse>(request.Url);
        jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./scripts/optionstrikes.js");

        var result = yahooResponse?.OptionChain?.Result?[0];
        if (result != null)
        {
            options = result.Options?[0].Puts ?? new List<Put>();
            price = result.Quote?.RegularMarketPrice ?? 0;
            expirationDates = result.ExpirationDates ?? new List<long>();
        }
    }

    public async Task ToggleRow(long ticks)
    {
        await jsModule.InvokeVoidAsync("toggleRow", ticks);
    }
}
